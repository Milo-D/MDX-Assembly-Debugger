/* Short Introduction to the prefered CodingStyle */

Tab-Size: 8
Compiler: g++ (GCC) 9.0.1 20190312

-----File Structure-------------------------------------

- Seperate Header and Source Files (.hpp and .cpp)

- A pair of Header/Source uses the exact same name:
  x.cpp belongs to x.hpp and NOT to abc.hpp

- Use .hpp Files for forward Declarations

- Use .cpp for Implementing the previously declared
  functions, classes, etc.

- Obviously: .hpp goes into the Header Directory and
  .cpp goes into the Source Directory

-----Headers---------------------------------------------

- Only include Headers in the CPP File (as long as possible)

- Use .hpp for a Header File, not .h

- "using namespace std;" does not belong into the .hpp

- generally: keep the Header File as short as possible.
  If the Header compiles without a certain thing, remove this
  thing.

- Prevent using extern Libraries like boost, etc.

- Seperate the Headers by their Category:

	// Pure C Headers
	#include <stdio.h>
	#include <stdlib.h>

	// C++ Headers
	#include <vector>

	// Project Headers
	#include "header.hpp"


------Naming Conventions---------------------------------

- Seperating Functions and Variables like that: is_ok,
  not isOk or iSoK or ____is_ok.

- Short and describing naming of variables and functions

- No CamelCase in Variables and Functions, but when !defining!
  a Class: class DebugTable { ... };

- Macro Variables are CAPITAL: #define MAX 5

- Macro Functions are NOT CAPITAL: #define clrscr(...) ...


------Functions-------------------------------------------

- keep the functions as short as possible

- max. size of a function: 50 lines

- NO hardcore nesting of if/else statements or loops.
  Max. 3 nestings.

- Recursion is allowed

- optional: ansi-screen size

- write helper functions into an anonymous namespace:
  namespace { /* your helper function */ };


------General----------------------------------------------


- DO NOT cluster lines. Please skip a line if it's
  too much clustering.

- if statement (how it should be):
	if(x == y)
		return -1;

	if(x == 2) {

		return -1;
		
	} else {

		printf("...");
		return -255;
	}

	if(1 == 1 && 2 == 1) {

		cout << "Never reached\n";
		return -EFATAL
	}

- loops (how it should be):
	while(x == 2)
		v.push_back(i);

	while(1) {

		if(x == 1) {

			cout << "World";
			
		} else {

			cout << "Hello";
		}

		if(x == 2)
			break;
	}

	/* Do not use unsigned int in for loops */
	for(int i = 0; i < v.size(); i++)
		cout << v[i] << endl;

	for(int i = 0; i < v.size(); i++) {

		if(v[i] % 2 == 0)
			break;
		else
			cout << v[i] << endl;
	}

- Using Variables (how it should be):
	int x = 2;
	unsigned int y = 2;

	int x, y;

	vector <string> table;

- Pointers and Addresses (how it should be):
	int *x;
	int *y;

	call_function(&var);

- Classes (how it should be):
	class DebugTable {

	public:
		DebugTable(...);
		~DebugTable(...);

		void call(std::string str);

	private:
		int my_int;		
	};

- Do NOT typedef structures


[ To be continued... ]
